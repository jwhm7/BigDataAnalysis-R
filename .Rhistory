summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head() %>%
for(i in 1:11) {
pie(pop_whole$pop, pop_whole$country)
facet_wrap(~year)
}
pop_whole <- gapminder %>%
group_by(year) %>%
summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head()
pop_whole <- gapminder %>%
group_by(year) %>%
summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head() %>%
for(year in 1:11) {
pie(pop_whole$pop, pop_whole$country)
facet_wrap(~year)
}
pop_whole <- gapminder %>%
group_by(year) %>%
summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head() %>%
for('year' in 1:11) {
pie(pop_whole$pop, pop_whole$country)
facet_wrap(~year)
}
pop_whole <- gapminder %>%
group_by(year) %>%
summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head() %>%
for('year' in 1:11) {
pie(pop_whole$pop, pop_whole$country) +
facet_wrap(~year)
}
pop_whole <- gapminder %>%
group_by(year) %>%
summarize(c_pop=sum(pop)) %>%
arrange(desc(pop_whole)) %>%
head() %>%
for('year' in 1:11) {
pie(pop_whole$pop, pop_whole$country) +
}
facet_wrap(~year)
pop_year <- gapminder %>%
group_by(year, pop) %>%
summarize(c_pop=sum(pop)) %>%
head()
hear(gapminder)
head(gapminder)
for(i in 1:11){
for(j in 1:6){
pop_whole <- gapminder %>%
filter(year) %>%
select(country, pop %>%
arrange(desc(pop_whole))) %>%
head()
}
pie(pop_whole$pop, pop_whole$country)
}
plot(iris$Petal.Length, iris$Petal.Width, main = 'Iris Data Set')
plot(iris$Petal.Length, iris$Petal.Width, main = 'Iris Data Set')
read(iris)
head(iris)
gapminder(head)
head(gapminder)
iris %>%
group_by(Species) %>%
plot(iris$Petal.Length, iris$Petal.Width, main = 'Iris Data Set')
iris %>%
group_by(Species) %>%
plot(iris$Sepal.Length, iris$Petal.Width, main = 'Iris Data Set')
plot(iris$Sepal.Length, iris$Petal.Width, main = 'Iris Data Set')
iris %>%
group_by(Species)
library(dplyr)
library(ggplot2)
library(gapminder)
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== i) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== i) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
}
pie(pop_whole$pop, pop_whole$country)
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== i) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== i) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head(){
pie(pop_whole$pop, pop_whole$country)
}
print(pop_whole)
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== i) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>% {
pie(pop_whole$pop, pop_whole$country)
}
print(pop_whole)
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== (1952+(i-1)*5)) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== (1952+(i-1)*5)) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head(){
pie(pop_whole$pop, pop_whole$country)
}
}
for(i in 1:11){
pop_whole <-gapminder %>%
filter(year== (1952+(i-1)*5)) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
iris %>%
filter(Species== 'Setosa') %>%
plot(iris$Petal.Length, iris$Petal.Width,
main = 'Iris Data Set')
iris %>%
filter(Species== 'Setosa') %>%
plot(iris$Petal.Width, iris$Petal.Length)
iris_Se <-iris %>%
filter(Species== 'Setosa') %>%
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
iris_Se <-iris %>%
filter(Species== 'Setosa') %>%
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
iris_Se <-iris
iris_Se <-iris %>%
filter(Species== 'Setosa')
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
iris_Se <-iris %>%
filter(Species== 'Setosa') %>%
select(Petal.Length, Petal.Width)
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
for(i in 1:12){
pop_whole <-gapminder %>%
filter(year== (1952+(i-1)*5)) %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
plot(iris$Petal.Length, iris$Petal.Width)
iris_Se <- iris %>%
select(Species== 'Setosa')
head(iris)
iris_Se <- iris %>%
filter(Species== setosa)
iris_Se <- iris %>%
filter(Species== 'setosa')
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
for(i in 1:12){
pop_whole <-gapminder %>%
filter(year== "(1952+(i-1)*5)") %>%
select(country, pop) %>%
arrange(desc(pop_whole)) %>%
head()
pie(pop_whole$pop, pop_whole$country)
}
iris_Se <- iris %>%
select(Species== 'Setosa')
iris_Se <- iris %>%
filter(Species== 'setosa') %>%
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
iris_Se <- iris %>%
select(Species== 'Setosa')
iris_Se <- iris %>%
filter(Species== 'setosa')
plot(iris_Se$Petal.Width, iris_Se$Petal.Length)
plot(iris_Se$Petal.Width, iris_Se$Petal.Length, main= 'Setosa Data Set')
plot(iris_Se$Petal.Width, iris_Se$Petal.Length, main= 'Setosa Data Set- Petal')
iris_se <- iris %>%
filter(Species== 'setosa')
plot(iris_se$Petal.Width, iris_se$Petal.Length, main= 'Setosa Data Set- Petal')
iris_se <- iris %>%
filter(Species== 'setosa')
plot(iris_se$Sepal.Width, iris_se$Sepal.Length, main= 'Setosa Data Set- Sepal')
iris_ve <- iris %>%
filter(Species== 'versicolor')
plot(iris_ve$Petal.Width, iris_ve$Petal.Length, main= 'Versicolor Data Set- Petal')
iris_ve <- iris %>%
filter(Species== 'versicolor')
plot(iris_ve$Sepal.Width, iris_ve$Sepal.Length, main= 'Versicolor Data Set- Sepal')
iris_vi <- iris %>%
filter(Species== 'virginica')
plot(iris_vi$Petal.Width, iris_vi$Petal.Length, main= 'Virginica Data Set- Petal')
iris_ve <- iris %>%
filter(Species== 'versicolor')
plot(iris_ve$Sepal.Width, iris_ve$Sepal.Length, main= 'Versicolor Data Set- Sepal')
sl.setosa <- iris$Sepal.Length %>%
filter(Species== 'setosa')
# (2) cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
# geom_bar -> 평균 가격을 구해서 막대그래프로 쌱 그려라
m_price<- diamons %>%
group_by(cut) %>%
summarize(mean_price=mean(price))
# (2) cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
# geom_bar -> 평균 가격을 구해서 막대그래프로 쌱 그려라
library(dplyr)
library(ggplot2)
m_price<- diamons %>%
group_by(cut) %>%
summarize(mean_price=mean(price))
m_price<- diamonds %>%
group_by(cut) %>%
summarize(mean_price=mean(price))
m_price
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity')
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity', fill=cut))
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity', aes(fill=cut))
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity', aes(fill=cut)) +
scale_fill_brewer(palette = "Spectral")
m.price<- diamonds %>%
group_by(cut, color) %>%
summarize(mean.price=mean(price))
m.price
ggplot(data= m.price, aes(x= cut, y= mean.price)) +
geom_bar(stat = 'identity', aes(fill=color)) +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'mean price',
title= "Cut Quality와 Color에 따른 가격 변화")
m.price<- diamonds %>%
group_by(cut, color) %>%
summarize(mean.price=mean(price))
m.price
ggplot(data= m.price, aes(x= cut, y= mean.price)) +
geom_bar(stat = 'identity', aes(fill=color), position= 'dodge') +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'mean price',
title= "Cut Quality와 Color에 따른 가격 변화")
library(dplyr)
library(ggplot2)
mpg
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(fill='blue')
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(fill='blue')
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(aes(fill='blue'))
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(fill="blue")
ggplot(data= mpg, aes(x=cty, y=hwy), fill="blue")+
geom_point()
mpg
ggplot(data= mpg, aes(x=cty, y=hwy, fill="blue"))+
geom_point()
mpg
ggplot(data= mpg, aes(x=cty, y=hwy)+
geom_point(fill="blue")
mpg
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(fill="blue")
midwest
ggplot(data= midwest, aes(x= poptotal, y= popasian)) +
geom_point() +
xlim(0, 500000) +
ylim(0, 10000)
midwest
ggplot(data= midwest, aes(x= poptotal, y= popasian)) +
geom_point(fill='blue') +
xlim(0, 500000) +
ylim(0, 10000)
midwest
ggplot(data= midwest, aes(x= poptotal, y= popasian)) +
geom_point(col='blue') +
xlim(0, 500000) +
ylim(0, 10000)
ggplot(data= mpg, aes(x=cty, y=hwy))+
geom_point(col="blue")
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity') +
scale_fill_brewer(pallette = "Spectral") +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
scale_fill_brewer(pallette = "Spectral") +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
scale_fill_brewer(pallette = "Blues") +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= diamonds, aes(x= cut)) +
geom_bar(aes(fill= cut))+
scale_fill_brewer(palette = "Blues") +
labs(x= 'no. of diamonds',
y= 'cut quality',
title = "Cut Quality에 따른 Diamonds 개수")
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
scale_fill_brewer(pallette = "Blues") +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
scale_fill_brewer(pallette = "Blues") +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
# 자동차 종류= class
# 빈도 막대 그래프는 값의 빈도(개수)로 막대의 길이를 표현한다
# 따라서 y 축 없이 x 축만 지정하고, geom_bar()를 사용하면 된다.
# x 축 변수의 항목별 빈도 막대 그래프가 출력된다.
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class))
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class))
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class))
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class)) +
lab(x= class,
y= number,
title= '자동차 종류별 빈도')
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class)) +
labs(x= class,
y= number,
title= '자동차 종류별 빈도')
ggplot(data= mpg, aes(x= class)) +
geom_bar(aes(fill= class)) +
labs(x= 'class',
y= 'number',
title= '자동차 종류별 빈도')
ggplot(data= economics, aes(x= date, y= psavert)) +
geom_line(color="blue") +
ggtitle('Time Series Graph, Personal Saving Rate')
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Spectral")
mpg_c <- mpg %>%
filter(class %in% c('compact', 'subcompact', 'suv'))
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Spectral")
library(RColorBrewer)
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= "Spectral", color= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= "Spectral", color= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
suv_cty <- mpg %>%
filter(class== 'suv') %>%
group_by(manufacturer) %>%
summarize(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head()
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= "Spectral")) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
mpg_c <- mpg %>%
filter(class %in% c('compact', 'subcompact', 'suv'))
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Spectral")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Blue")
mpg_c <- mpg %>%
filter(class %in% c('compact', 'subcompact', 'suv'))
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= class) +
scale_fill_brewer(palette = "Blues")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= mpg_c) +
scale_fill_brewer(palette = "Blues")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot()
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(col=c('red', 'green', 'blue'))
ggplot(data= economics, aes(x= date, y= psavert)) +
geom_line(col="blue") +
ggtitle('Time Series Graph, Personal Saving Rate')
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(color=c('red', 'green', 'blue'))
ggplot(data= diamonds, aes(x= cut)) +
geom_bar(aes(fill= cut))+
scale_fill_brewer(palette = "Blues") +
labs(x= 'no. of diamonds',
y= 'cut quality',
title = "Cut Quality에 따른 Diamonds 개수")
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity', aes(fill=cut)) +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'price',
title= "Cut Quality에 따른 가격 변화")
ggplot(data= m.price, aes(x= cut, y= mean.price)) +
geom_bar(stat = 'identity', aes(fill=color), position= 'dodge') +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'mean price',
title= "Cut Quality와 Color에 따른 가격 변화")
