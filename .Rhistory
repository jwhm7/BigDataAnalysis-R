)
ggplot(data= suv_cty, aes(reorder(manufacturer, -mean_cty), y= mean_cty)) +
geom_bar(stat='identity', aes(fill= manufacturer)) +
labs(x= 'manufacturer',
y= 'mean_cty',
title= '회사별 SUV의 도시 연비'
)
mpg_c <- mpg %>%
filter(class %in% c('compact', 'subcompact', 'suv'))
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Spectral")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= "Blue")
mpg_c <- mpg %>%
filter(class %in% c('compact', 'subcompact', 'suv'))
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= class) +
scale_fill_brewer(palette = "Blues")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(fill= mpg_c) +
scale_fill_brewer(palette = "Blues")
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot()
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(col=c('red', 'green', 'blue'))
ggplot(data= economics, aes(x= date, y= psavert)) +
geom_line(col="blue") +
ggtitle('Time Series Graph, Personal Saving Rate')
ggplot(data= mpg_c, aes(x= class, y= cty)) +
geom_boxplot(color=c('red', 'green', 'blue'))
ggplot(data= diamonds, aes(x= cut)) +
geom_bar(aes(fill= cut))+
scale_fill_brewer(palette = "Blues") +
labs(x= 'no. of diamonds',
y= 'cut quality',
title = "Cut Quality에 따른 Diamonds 개수")
ggplot(data= m_price, aes(x= cut, y= mean_price)) +
geom_bar(stat = 'identity', aes(fill=cut)) +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'price',
title= "Cut Quality에 따른 가격 변화")
ggplot(data= m.price, aes(x= cut, y= mean.price)) +
geom_bar(stat = 'identity', aes(fill=color), position= 'dodge') +
scale_fill_brewer(palette = "Spectral") +
labs(x= 'cut quality',
y= 'mean price',
title= "Cut Quality와 Color에 따른 가격 변화")
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
str(ucla)
head(ucla)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
# 모델링
dtc <- rpart(admit~., data = ucla_train)
# 예측
pred <- predict(dtc, ucla_test, type = 'class')
# 평가
confusionMatrix(pred, ucla_test$admit)
# Accuracy = 0.6203
# 정확도 68.35%으로 정확하다고 하기 어렵다.
# (2) Random Forest
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
# 모델링
rf <- randomForest(admit~., ucla_train,
ntree= 100, nodesize= 4)
rf
# 예측
pred <- predict(rf, ucla_test, type= 'class')
# 평가
confusionMatrix(pred, ucla_test$admit)
# Accuracy = 0.7342
# 정확도 73.42%로 decision tree와 비교했을 때 상대적으로 정확도가 높지만, 자체로는 정확도가 높다고 하기 어렵다.
# 시각화
plot(rf)
# (3) SVM
library(caret)
library(e1071)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
# 모델링
svc <- svm(admit~., ucla_train)
# 예측
pred <- predict(svc, ucla_test, type= 'class')
# 평가
table(pred, ucla_test$admit)
confusionMatrix(pred, ucla_test$admit)
# Accuracy = 0.7342
# Hyper Parameter
svc100 <- svm(admit~., ucla_train, cost= 100)
pred100 <- predict(svc100, ucla_test, type= 'class')
table(pred100, ucla_test$admit)
confusionMatrix(pred100, ucla_test$admit)
# 0.6962
svc50 <- svm(admit~., ucla_train, cost= 50)
pred50 <- predict(svc50, ucla_test, type= 'class')
table(pred50, ucla_test$admit)
confusionMatrix(pred50, ucla_test$admit)
# 0.7089
svc40 <- svm(admit~., ucla_train, cost= 40)
pred40 <- predict(svc40, ucla_test, type= 'class')
table(pred40, ucla_test$admit)
confusionMatrix(pred40, ucla_test$admit)
# 0.7342
# (4) K-NN
library(class)
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 5 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
# Accuracy = 0.9114
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 3 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
# Accuracy = 0.9367
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 7 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
# Accuracy = 0.8608
wine <- read.table('https://raw.githubusercontent.com/SunhoPark2107/R-lecture-2021/main/data/wine.data.txt', sep = ',')
head(wine)
columns <- readLines('https://raw.githubusercontent.com/SunhoPark2107/R-lecture-2021/main/data/wine.name2.txt')
columns
names(wine)
names(wine) [2:14] <- columns
names(wine)
names(wine)
names(wine)[2:14] <- substr(columns, 4, nchar(columns))
wine <- read.table('data/wine.data.txt', sep = ',')
colums <-readLines('data/wine.name.txt')
names(wine)[2:14] <- colums
names(wine)[2:14] <-substr(colums, 4,nchar(colums))
names(wine)[1] <- 'Y'
wine$Y <- factor(wine$Y)
set.seed(2021)
train_index <- sample(1:nrow(wine),0.8*nrow(wine))
test_index <- setdiff(1:nrow(wine), train_index)
names(wine)[2:14] <- columns
names(wine)[2:14] <-substr(columns, 4,nchar(columns))
names(wine)[1] <- 'Y'
wine$Y <- factor(wine$Y)
set.seed(2021)
train_index <- sample(1:nrow(wine),0.8*nrow(wine))
test_index <- setdiff(1:nrow(wine), train_index)
wine_index <- createDataPartition(wine$name, p= 0.8, list=F)
wine_train <- wine[wine_index, ]
wine_test <- wine[-wine_index, ]
names(wine)[1] <- 'name'
wine$name <- factor(wine$name)
set.seed(2021)
wine_index <- createDataPartition(wine$name, p= 0.8, list=F)
wine_train <- wine[wine_index, ]
wine_test <- wine[-wine_index, ]
# 모델링
dtc <- rpart(name~., wine_train)
# 예측
pred <- predict(dtc, wine_test, type = 'class')
wine <- read.table('data/wine.data.txt', sep = ',')
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
# 모델링
dtc <- rpart(admit~., data = ucla_train)
# 예측
pred <- predict(dtc, ucla_test, type = 'class')
# 평가
confusionMatrix(pred, ucla_test$admit)
# Accuracy = 0.6203
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
# 모델링
library(randomForest)
rf <- randomForest(admit~., ucla_train,
ntree= 100, nodesize= 4)
rf
# 모델링
library(randomForest)
# 모델링
library(randomForest)
rf <- randomForest(admit~., ucla_train,
ntree= 100, nodesize= 4)
rf
pred <- predict(rf, ucla_test, type= 'class')
# 평가
confusionMatrix(pred, ucla_test$admit)
library(caret)
library(e1071)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
svc <- svm(admit~., ucla_train)
# 예측
pred <- predict(svc, ucla_test, type= 'class')
# 평가
table(pred, ucla_test$admit)
confusionMatrix(pred, ucla_test$admit)
svc100 <- svm(admit~., ucla_train, cost= 100)
pred100 <- predict(svc100, ucla_test, type= 'class')
table(pred100, ucla_test$admit)
confusionMatrix(pred100, ucla_test$admit)
svc50 <- svm(admit~., ucla_train, cost= 50)
pred50 <- predict(svc50, ucla_test, type= 'class')
table(pred50, ucla_test$admit)
confusionMatrix(pred50, ucla_test$admit)
svc40 <- svm(admit~., ucla_train, cost= 40)
pred40 <- predict(svc40, ucla_test, type= 'class')
table(pred40, ucla_test$admit)
confusionMatrix(pred40, ucla_test$admit)
library(class)
# k= 5
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 5 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 3 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
k <- knn(ucla_train[, 1:4], ucla_test[, 1:4],
ucla_train$admit, k= 7 )
k
ucla_test$admit
confusionMatrix(k, ucla_test$admit)
wine <- read.table('data/wine.data.txt', sep = ',')
setwd("~/R")
wine <- read.table('data/wine.data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ',')
colums <-readLines('data/wine_name.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <-substr(columns, 4,nchar(columns))
names(wine)[1] <- 'name'
wine$name <- factor(wine$name)
set.seed(2021)
wine_index <- createDataPartition(wine$name, p= 0.8, list=F)
wine_train <- wine[wine_index, ]
wine_test <- wine[-wine_index, ]
# 모델링
dtc <- rpart(name~., wine_train)
# 예측
pred <- predict(dtc, wine_test, type = 'class')
# 평가
confusionMatrix(pred, wine_test$name)
# 모델링
rf <- randomForest(name~., wine_train,
ntree= 100, nodesize= 4)
rf
# 예측
pred <- predict(rf, wine_test, type= 'class')
# 평가
confusionMatrix(pred, wine_test$name)
# 시각화
plot(rf)
svc <- svm(name~., wine_train)
# 예측
pred <- predict(svc, wine_test, type= 'class')
# 평가
table(pred, wine_test$name)
confusionMatrix(pred, wine_test$name)
# 모델링
svc <- svm(name~., wine_train)
# 예측
pred <- predict(svc, wine_test, type= 'class')
# 평가
table(pred, wine_test$name)
confusionMatrix(pred, wine_test$name)
# 평가
table(pred, wine_test$name)
# 모델링
svc <- svm(name~., wine_train)
# 예측
pred <- predict(svc, wine_test, type= 'class')
# 평가
table(pred, wine_test$name)
confusionMatrix(pred, wine_test$name)
set.seed(2021)
wine_index <- createDataPartition(wine$name, p= 0.8, list=F)
wine_train <- wine[wine_index, ]
wine_test <- wine[-wine_index, ]
# 모델링
svc <- svm(name~., wine_train)
# 예측
pred <- predict(svc, wine_test, type= 'class')
# 평가
table(pred, wine_test$name)
confusionMatrix(pred, wine_test$name)
svc100 <- svm(admit~., ucla_train, cost= 100)
pred100 <- predict(svc100, ucla_test, type= 'class')
table(pred100, ucla_test$admit)
confusionMatrix(pred100, ucla_test$admit)
svc100 <- svm(name~., wine_train, cost= 100)
pred100 <- predict(svc100, name_test, type= 'class')
table(pred100, wine_test$name)
confusionMatrix(pred100, wine_test$name)
svc100 <- svm(name~., wine_train, cost= 100)
pred100 <- predict(svc100, name_test, type= 'class')
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 5 )
k
wine_test$name
confusionMatrix(k, wine_test$name)
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 3 )
k
wine_test$name
confusionMatrix(k, wine_test$name)
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 4 )
k
wine_test$name
confusionMatrix(k, wine_test$name)
rf <- randomForest(name~., wine_train,
ntree= 100, nodesize= 4)
rf
# 예측
pred <- predict(rf, wine_test, type= 'class')
# 평가
confusionMatrix(pred, wine_test$name)
svc <- svm(name~., wine_train)
# 예측
pred <- predict(svc, wine_test, type= 'class')
# 평가
table(pred, wine_test$name)
confusionMatrix(pred, wine_test$name)
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 4 )
k
wine_test$name
confusionMatrix(k, wine_test$name)
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 7 )
k
wine_test$name
confusionMatrix(k, wine_test$name)
k <- knn(wine_train[, 1:4], wine_test[, 1:4],
wine_train$name, k= 4)
k
wine_test$name
confusionMatrix(k, wine_test$name)
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
library(caret)
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
install.packages('createDataPartition')
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
install.packages('createDataPartition')
install.packages(c("boot", "class", "lattice", "MASS", "nnet", "spatial"))
library(rpart)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
install.packages("createDataPartition")
library(caret)
install.packages("caret")
library(caret)
install.packages('lattice')
install.packages("lattice")
install.packages("ggplot2")
library(caret)
install.packages("lattice")
library('lattice')
library(ggplot2)
library(lattice)
library(ggplot2)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
library(caret)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
library(rpart)
library(caret)
library(lattice)
library(ggplot2)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
wine <- read.table('data/wine_data.txt', sep = ',')
setwd("~/R")
setwd("~/R")
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ',')
setwd("~/R")
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ' ')
wine <- read.table('data/wine_data.txt', sep = ',')
setwd("~/R")
wine <- read.table('data/wine_data.txt', sep = ' ')
setwd("~/R")
wine <- read.table('data/wine_data.txt', sep = ' ')
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', head=T)
wine <- read.table('data/wine_data.txt', sep= ',')
# 1. wine 4가지 모델, 모델링, 예측, 평가
# (1) decision tree
wine <- read.table('data/wine.data.txt', sep = ',')
# 1. wine 4가지 모델, 모델링, 예측, 평가
# (1) decision tree
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ',')
wine <- read.table('data/wine_data.txt', sep = ',')
# 1. wine 4가지 모델, 모델링, 예측, 평가
# (1) decision tree
wine <- read.table('data/wine_data.txt', sep = ',')
pred <- predict(rf, ucla_test, type= 'class')
library(rpart)
library(caret)
library(lattice)
library(ggplot2)
ucla <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
ucla$admit= factor(ucla$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
dim(ucla_train)
dim(ucla_test)
table(ucla_train$admit)
dtc <- rpart(admit~., data = ucla_train)
# 예측
pred <- predict(dtc, ucla_test, type = 'class')
# 평가
confusionMatrix(pred, ucla_test$admit)
set.seed(2021)
ucla_index <- createDataPartition(ucla$admit, p= 0.8, list=F)
ucla_train <- ucla[ucla_index, ]
ucla_test <- ucla[-ucla_index, ]
library(randomForest)
rf <- randomForest(admit~., ucla_train,
ntree= 100, nodesize= 4)
rf
setwd("~/R")
wine <- read.table('data/wine_data.txt', sep = ',')
columns <-readLines('data/wine_name.txt')
names(wine)[2:14] <- columns
names(wine)[2:14] <-substr(columns, 4,nchar(columns))
names(wine)[1] <- 'name'
wine$name <- factor(wine$name)
wine <- read.table('data/wine_data.txt', sep = ',')
