install.packages("KoNLP")
install.packages("KoNLP")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade="never", INSTALL_opts=c("--no-multiarch"))
remotes::install_github("haven-jeon/KoNLP", INSTALL_opts=c("--no-multiarch"))
install.packages("rJava")
install.packages("KoNLP")
remotes::install_github("haven-jeon/KoNLP", INSTALL_opts=c("--no-multiarch"))
remove.packages("KoNLP")
remotes::install_github("haven-jeon/KoNLP", upgrade="never", INSTALL_opts=c("--no-multiarch"))
install.packages("wordcloud")
install.packages("tm")
install.packages("KoNLP")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
force=TRUE
'force= TRUE'
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"))
force = TRUE
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts = c("--no-multiarch"), force= TRUE)
library(KoNLP)
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages(“wordcloud”)
install.packages('wordcloud')
install.packages(“tm”)
install
install.packages('tm')
library(KoNLP)
install.packages('RCurl')
# Wikipedia "data science"
library(RCurl)
install.packages(XML)
install.packages('XML')
library(XML)
library(stringr)
html <- readLines('https://en.wikipedia.org/wiki/Data_science')
html <- htmlParse(html, asText = T)
doc <- xpathSApply(html, '//p', xmlValue)
length(html)
length(doc)
doc[1]
doc[2]
doc[3]
corpus <- doc[2:3]
# 모두 소문자로 변경
corpus <- tolower(corpus)
corpus[1]
# 숫자 제거
corpus_txt <- gsub('[[:digit:]]', ' ', corpus)
corpus_txt
corpus_txt[1]
corpus
# 숫자 제거
corpus <- gsub('[[:digit:]]', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub('.', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub(',', ' ', corpus)
corpus[1]
corpus <- gsub('[[:digit:]]', ' ', corpus)
corpus[1]
# 숫자 제거
corpus <- gsub('[[:digit:]]', ' ', corpus)
corpus[1]
corpus <- doc[2:3]
html <- readLines('https://en.wikipedia.org/wiki/Data_science')
html <- htmlParse(html, asText = T)
doc <- xpathSApply(html, '//p', xmlValue)
length(doc)
doc[1]
doc[2]
doc[3]
corpus <- doc[2:3]
# 모두 소문자로 변경
corpus <- tolower(corpus)
corpus[1]
# 숫자 제거
corpus <- gsub('[[:digit:]]', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub(',', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub('[[:punctuation:]]', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub('[[:punct:]]', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub('[[:punct:]]', '', corpus)
corpus[1]
html <- readLines('https://en.wikipedia.org/wiki/Data_science')
html <- htmlParse(html, asText = T)
doc <- xpathSApply(html, '//p', xmlValue)
length(doc)
doc[1]
doc[2]
doc[3]
corpus <- doc[2:3]
# 모두 소문자로 변경
corpus <- tolower(corpus)
corpus[1]
# 숫자 제거
corpus <- gsub('[[:digit:]]', ' ', corpus)
corpus[1]
# 구둣점 제거
corpus <- gsub('[[:punct:]]', '', corpus)
corpus[1]
# 끝에 있는 공백 제거
corpus <- str_trim(corpus, side= 'left')
# 끝에 있는 공백 제거
corpus <- str_trim(corpus, side= 'right')
corpus
# 끝에 있는 공백 제거
corpus <- gsub('\n', ' ', corpus)
corpus <- str_trim(corpus, side= 'right')
corpus
# 불용어 제거
stopwords <- c('a', 'the', 'and', 'in', 'of', 'to', 'but')
words <- str_split(corpus, ' ')
words
unlist(words)
l <- list()
for(word in unlist(words)) {
if(!word %in% stopwords) {
l <- append(l, word)
}
}
corpus <- paste(l, collapse = ' ')
corpus
`%notin%` <- Negate(`%in%`)
`%notin%` <- Negate(`%in%`)
l <- list()     # 빈 리스트 생성
for(word in unlist(words)) {
if(!word %in% stopwords) {
l <- append(l, word)
}
}
corpus <- paste(l, collapse = ' ')
corpus
library(RCurl)
library(XML)
library(stringr)
html <- readLines('https://en.wikipedia.org/wiki/Data_science')
html <- htmlParse(html, asText = T)
doc <- xpathSApply(html, '//p', xmlValue)
install.packages('tm')
library(tm)
library(SnowballC)
install.packages('SnowballC')
library(SnowballC)     # 어간 추출 라이브러리
doc <- Corpus(Vectorsource(doc))
doc <- Corpus(VectorSource(doc))
inspect(doc)
doc <- tm_map(doc, content_transformer(tolower))
doc <- tm_map(doc, removeNumbers)
doc <- tm_map(doc, removeWords, stopwords('english'))
doc <- tm_map(doc, removePunctuation)
doc <- tm_map(doc, stripWhitespace)
########################################
# DTM 구축
########################################
dtm <- DocumentTermMatrix(doc)
dim(dtm)
inspect(dtm)
########################################
# Word Cloud
########################################
library(wordcloud)
typeof(dta)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
wordcloud(words= df$word, freq= df$freq, min.freq = 1, max.words= 100,
random.order=F, rot.per= 0.35)
install.packages('wordcloud2')
library(wordcloud2)
wordcloud2(df)
d200 <- df(1:200)
d200 <- df[1:200]
d200 <- df[1:200, ]
wordcloud2(d1, shape= 'star')
wordcloud2(d200, shape= 'star')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0)
?wordcloud2
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'baby blue')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'blu')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'bllue')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'blue')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'black')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'black')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'black')
wordcloud2(d200, minRotation = pi/6, maxRotation = pi/3, rotateRatio = 1.0,
backgroundColor = 'black')
setwd("~/R/data")
setwd("~/R")
# Alice data
alice <- read.table('data/Alice.txt', sep= " ")
# Alice data
alice <- read.table('data/Alice.txt', sep= ",")
# Alice data
alice <- read.table('data/Alice.txt')
# Alice data
alice <- read.table('data/Alice.txt', header=TRUE, fill= TRUE)
# Alice data
alice <- read.table('data/Alice.txt', fill= TRUE)
head(alice)
# 전처리
library(RCurl)
library(XML)
library(stringr)
library(tm)        # Text Mining 라이브러리
library(SnowballC)
doc <- alice(VectorSource(doc))
doc <- Corpus(VectorSource(doc))
inspect(doc)
alice <- read.table('data/Alice.txt', fill= TRUE)
head(alice)
doc <- xpathSApply(html, '//p', xmlValue)
doc <- xpathSApply(alice, '//p', xmlValue)
length(alice)
alice[1]
alice[2]
alice[3]
inspect(alice)
alice <- tm_map(alice, content_transformer(tolower))
ibrary("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
alice <- readLines('data/Alice.txt', fill= TRUE)
alice <- readLines('data/Alice.txt')
# Alice data
library("tm")
docs <- Corpus(VectorSource(alice))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- DocumentTermMatrix(doc)
docs <- Corpus(VectorSource(alice))
dtm <- DocumentTermMatrix(doc)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
inspect(dtm)
library(wordcloud2)
wordcloud2(df)
d200 <- df[1:200, ]
inspect(dtm)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
library(wordcloud2)
wordcloud2(df)
d200 <- df[1:200, ]
wordcloud2(df, shape= 'star')
wordcloud2(df, figPath = "Alice_mask.png", size = 1)
figPath = system.file("Alice_mask.png",package = "wordcloud2")
wordcloud2(df, figPath = "Alice_mask.png", size = 1)
wordcloud2(df, figPath = figPath , size = 1)
figPath = system.file("Alice_mask.png",package = "wordcloud2")
wordcloud2(df, figPath = figPath , size = 1)
figPath = system.file("Alice_mask.png",package = "wordcloud2")
wordcloud2(df, figPath = figPath , size = 1)
wordcloud2(df)
wordcloud2(demoFreq, figPath ="Alice_mask.png" , size = 1)
figPath = system.file("R/data/Alice_mask.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath ="Alice_mask.png" , size = 1)
setwd("~/R")
figPath = system.file("C:\\data\\Alice_mask.png", package = "wordcloud2")
wordcloud2(demoFreq, figPath ="Alice_mask.png" , size = 1)
wordcloud2(demoFreq, figPath ="~/MacintoshHD/User/JiwonMoon/R/data/Alice_mask.png" , size = 1)
wordcloud2(demoFreq, figPath ="~/Macintosh_HD/User/JiwonMoon/R/data/Alice_mask.png" , size = 1)
wordcloud2(demoFreq, figPath ="~//User/JiwonMoon/R/data/Alice_mask.png" , size = 1)
figPath = system.file("~//User/JiwonMoon/R/data/Alice_mask.png", package = "wordcloud2")
wordcloud2(demoFreq, figPath ="~//User/JiwonMoon/R/data/Alice_mask.png" , size = 1)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("tmltools")
install.packages("jsonlite")
install.packages("tmltools")
install.packages("yaml")
install.packages("base64enc")
install.packages("jsonlite")
library(wordcloud2)
library(htmlwidgets)
library(tmltools)
library(jsonlite)
library(yaml)
library(base64enc)
figPath = system.file("Alice_mask.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath = system.file("examples/Alice_mask.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath <- "Alice_mask.png"
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(word_cloud, figPath = figPath, size = 1.5,color = "skyblue")
install.packages('png')
library(png)
setwd("~/R")
a_mask <- readPNG('data/Alice_mask.png')
figPath <- a_mask
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = a_mask , size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1)
# Alice data
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
alice <- readLines('data/Alice.txt')
docs <- Corpus(VectorSource(alice))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
inspect(dtm)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
library(wordcloud2)
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1)
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = white)
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = white)
wordcloud2(demoFreq, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'white')
wordcloud2(df, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'white')
df <- data.frame(word= names(v), freq= v)
head(df)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'white')
wordcloud2(df, shape= 'star')
wordcloud2(df, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'white')
install.packages("htmlwidgets")
install.packages("htmltools")
install.packages("jsonlite")
install.packages("yaml")
install.packages("base64enc")
library(htmlwidgets)
ligrary(htmltools)
library(htmltools)
library(jsonlite)
library(yaml)
library(base64enc)
wordcloud2(df, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'white')
wordcloud2(df, figPath = 'data/Alice_mask.png' , size = 1, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', col='random-light', size = 1, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 0.3, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1, backgroundColor = 'black')
require(devtools)
install_github("lchiffon/wordcloud2")
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
alice <- readLines('data/Alice.txt')
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
alice <- readLines('data/Alice.txt')
docs <- Corpus(VectorSource(alice))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
inspect(dtm)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
alice <- readLines('data/Alice.txt')
docs <- Corpus(VectorSource(alice))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
inspect(dtm)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
library(wordcloud2)
library(htmlwidgets)
library(htmltools)
library(jsonlite)
library(yaml)
library(base64enc)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
alice <- readLines('data/Alice.txt')
docs <- Corpus(VectorSource(alice))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
dtm <- DocumentTermMatrix(docs)
dim(dtm)
inspect(dtm)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
require(devtools)
require(devtools)
install_github("lchiffon/wordcloud2")
library(wordcloud2)
install_github("lchiffon/wordcloud2")
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
install_github("lchiffon/wordcloud2", force=TRUE)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
require(devtools)
install_github("lchiffon/wordcloud2")
install_github("lchiffon/wordcloud2", force=TRUE)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1, backgroundColor = 'black')
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
setwd("~/R")
m <- as.matrix(dtm)
v <- sort(colSums(m), decreasing = T)
v[1:5]
df <- data.frame(word= names(v), freq= v)
head(df)
require(devtools)
install_github("lchiffon/wordcloud2", force=TRUE)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
install.packages("devtools")
require(devtools)
install_github("lchiffon/wordcloud2", force=TRUE)
library(wordcloud2)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
require(devtools)
install_github("lchiffon/wordcloud2", force=TRUE)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
require(devtools)
install_github("lchiffon/wordcloud2")
install_github("lchiffon/wordcloud2, force= TRUE")
install_github("lchiffon/wordcloud2")
install_github("lchiffon/wordcloud2", force= TRUE)
library(wordcloud2)
library(htmlwidgets)
library(htmltools)
library(jsonlite)
library(yaml)
library(base64enc)
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
setwd("~/R")
wordcloud2(df, figPath = 'data/Alice_mask.png', size = 1)
install.packages(text2vec)
install.packages('text2vec')
# IMDB 영화평 감성분석
library(text2vec)
library(caret)
str(movie_review)
# IMDB 영화평 감성분석
library(text2vec)
install.packages("text2vec")
# IMDB 영화평 감성분석
library(text2vec)
install.packages("float")
# IMDB 영화평 감성분석
library(text2vec)
library(caret)
str(movie_review)
